{"version":3,"file":"main.bundle.js","mappings":"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AG,EAAG,EAAG,EAAI,EAAG,GAE9B,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,EAC/B,EAAG,EAAG,EAAG,EAAM,EAAG,EAAG,EAAG,EAAI,EAAG,EAC/B,EAAG,GAAI,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,EAAG,GAAI,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,EAC/B,EAAG,GAAI,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,GAE9B,GAAI,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,EAAG,GAAI,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,GAAI,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,EAAG,GAAI,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,EAE/B,EAAG,EAAG,EAAG,EAAM,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,GAAI,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,GAAI,EAAG,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,EAC/B,GAAI,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,EAC/B,EAAG,EAAG,EAAG,EAAM,EAAG,EAAG,EAAG,EAAI,EAAG,EAE/B,GAAI,GAAI,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9B,EAAG,GAAI,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,EAC/B,EAAG,GAAI,EAAG,EAAK,EAAG,EAAG,EAAG,EAAI,EAAG,EAC/B,GAAI,GAAI,EAAG,EAAI,EAAG,EAAG,EAAG,EAAI,EAAG,GAC9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","sources":["webpack://bigworld/./node_modules/gl-matrix/esm/common.js","webpack://bigworld/./node_modules/gl-matrix/esm/mat4.js","webpack://bigworld/./node_modules/gl-matrix/esm/vec3.js","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/helper.ts","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/renderer/rend.ts","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/meshes/mesh.ts","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/renderer/camera.ts","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/meshes/cube.ts","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/meshes/square_pyramid.ts","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/meshes/plane.ts","webpack://bigworld/./src/home/jdtbo/dev/bigworld/src/main.ts"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","export const CheckGPU = () : boolean => {\n    const entry: GPU = navigator.gpu;\n    const gpuCheck = document.getElementById('gpu-check') as HTMLHeadingElement;\n\n    if (!entry) {\n        gpuCheck.textContent = 'Current browser does not support WebGPU!';\n        return false;\n    }\n\n    gpuCheck.textContent = 'WebGPU Enabled!';\n\n    return true;\n}\n\nexport const createCanvas = () : HTMLCanvasElement => {\n    const canvas = document.createElement(\"canvas\");\n    const gpuCheck = document.getElementById('checker-div');\n    document.body.insertBefore(canvas, gpuCheck);\n    canvas.id = \"web-gpu-context\";\n    canvas.width = 640;\n    canvas.height = 480;\n\n    gpuCheck?.remove();\n\n    return canvas;\n}\n\nexport const createButton = (text: string, onclick?: () => void) : HTMLButtonElement => {\n    const button = document.createElement(\"button\");\n    button.onclick = onclick;\n    button.textContent = text;\n    document.body.appendChild(button);\n\n    return button;\n}\n\nexport const createHeading = (text: string) : HTMLHeadingElement => {\n    const heading = document.createElement(\"h5\");\n    heading.textContent =  text;\n    document.body.appendChild(heading);\n\n    return heading;\n}\n\nexport enum BWResult {\n    SUCESS,\n    ERROR\n}","import basicVertWGSL from './shaders/basic.vert.wgsl';\nimport vertexPositionColorWGSL from './shaders/vertexPositionColor.frag.wgsl';\nimport { mat4, vec3 } from 'gl-matrix';\nimport Mesh, { MeshMap } from '../meshes/mesh';\nimport Model from '../models/model';\nimport { BWResult } from '../helper';\nimport GameObject from '../gameObject';\nimport { SourceMap } from 'module';\nimport { resourceLimits } from 'worker_threads';\nimport { Camera } from './camera';\n\nexport type RenderInit = (params: {\n    canvas: HTMLCanvasElement;\n    pageState: { active: boolean};\n}) => void | Promise<void>;\n\n//Map for storing all active meshes used in the scene.\nconst meshMap = new MeshMap();\n\nconst maxModels = 100;\nconst models: Model[] = [];\n//The list of bind groups\nconst uniformBindGroups: GPUBindGroup[] = [];\n\n//Future - Use array order as priorty of camera\nconst maxCameras = 1;\nconst cameras: Camera[] = [];\nconst cameraUniformBindGroups: GPUBindGroup[] = [];\n\nexport const addCamera = (camera: Camera) : BWResult => {\n    if (cameras.length >= maxCameras)\n        return BWResult.ERROR;\n\n    camera.onInit();\n    cameras.push(camera);\n    return BWResult.SUCESS;\n}\n\n/**\n * Draw a model to the screen with the model's given transform. The mesh of\n * the model will need to have been loaded already and will return ERROR \n * BWResult if not. Should most likely be moved to a scene module.\n * \n * @param model Model to be drawn.\n * @return BWResult\n */\nexport const drawModel = (model: Model) : BWResult => {\n    // meshMap.add()\n    if (models.length == maxModels) {\n        console.log(\"Cannot add model exceeded max!\")\n        return BWResult.ERROR;\n    }\n\n    models.push(model);\n    //Architecture redisgn to allow for dynamic model uploads\n    // uniformBindGroups.push();\n    return BWResult.SUCESS;\n};\n\n/**\n * Loads the mesh to be stored on the GPU. If map is already loaded return \n * ERROR result.\n *  \n * @param mesh Mesh to be loaded to the GPU\n * @returns BWResult\n */\nexport const loadMesh = (mesh: Mesh) : BWResult => {\n    try {\n        meshMap.add(mesh);\n        return BWResult.SUCESS;\n    } catch (err) {\n        console.log(err);\n        return BWResult.ERROR;\n    };\n};\n\nconst matrixSize = 4 * 16\n\n/**\n * Create a new bind group for the specified uniform buffer and accounts for\n * the size of a matrix.\n * \n * @param device GPUDevice to be used to create the bind group\n * @param pipeline GPUPipeline to create the bind group from\n * @param uniformBuffer GPUBuffer to assign the bindgroup to\n * @param offset number of 4x4 matrices from the start of the buffer\n */\nconst newUniformBindGroup = (\n    device: GPUDevice, \n    pipeline: GPURenderPipeline, \n    uniformBuffer: GPUBuffer,\n    offset: number,\n) : GPUBindGroup => {\n    return device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n        {\n            binding: 0,\n            resource: {\n                buffer: uniformBuffer,\n                offset: offset*256,\n                size: matrixSize\n            },\n        },\n        ],\n    });\n}\n\nlet deltaTime = 0;\nlet frameNo = 0;\n\nexport const getDeltaTime = () => {\n    return deltaTime/1000;\n}\n\nconst startTime = Date.now();\n\nexport const getFrameRate = () => {\n    return frameNo/((Date.now() - startTime) / 1000);\n}\n\n/**\n * Begins the renderer including the draw loop. If renderer could not be\n * initialised an error is thrown.\n * \n * @param param0 Dictionary containing canvas and pagestate information.\n */\nconst initRenderer: RenderInit = async ({canvas, pageState}) => {\n    /**\n     * Select the GPU adaptor to use for rendering. If forceFallback is true\n     * AND blockFallback is true then no adaptor can be selected.\n     * \n     * @param entry The WebGPU entry\n     * @param powerPreference GPUPowerPreference for the adaptor\n     * @param forceFallback boolean Force GPU to be a fallback adaptor\n     * @param blockFallback boolean Block the fallback adaptor from being used\n     * @returns Promise<GPUAdapter | null>\n     */\n    async function selectAdapter(\n        entry: GPU, \n        powerPreference?: GPUPowerPreference, \n        forceFallback = false, \n        blockFallback = false\n    ) {\n        const adapter = await entry.requestAdapter({\n            powerPreference: powerPreference, \n            forceFallbackAdapter: forceFallback\n        });\n\n        if (adapter?.isFallbackAdapter && blockFallback === true) \n            return null;\n\n        return adapter;\n    }\n\n    const adapter = await selectAdapter(navigator.gpu, 'high-performance', false, true);\n    //debug\n    const adapterInfo = await adapter?.requestAdapterInfo();\n    console.log(adapterInfo?.vendor);\n    console.log(adapter?.isFallbackAdapter);\n    \n    //temp\n    if (adapter == null) {\n        throw new Error(\"Could not find adapter\")\n    }\n    const device = await adapter.requestDevice();\n\n    if (!pageState.active) return;\n    const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\n\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    const presentationSize = [\n        canvas.clientWidth * devicePixelRatio,\n        canvas.clientHeight * devicePixelRatio,\n    ];\n    const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n    context.configure({\n        device,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n        format: presentationFormat,\n        alphaMode: 'opaque',\n    });\n\n    // Create a vertex buffer from the MeshMap\n    const verticesBuffer = device.createBuffer({\n        size: meshMap.vertexSize * meshMap.vertexCount,\n        usage: GPUBufferUsage.VERTEX,\n        mappedAtCreation: true,\n    });\n\n    //Add all vertices in array\n    let bufferArray = new Float32Array(verticesBuffer.getMappedRange())\n    meshMap.forEach(({mesh, offset}) => {\n        bufferArray.set(mesh.vertexArray, (meshMap.vertexSize/4) * offset);\n    });\n    verticesBuffer.unmap();\n\n    //Create a new pipeline for each MeshMap/Shader\n    const pipeline = device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n            module: device.createShaderModule({\n                code: basicVertWGSL,\n            }),\n            entryPoint: 'main',\n            buffers: [\n                {\n                arrayStride: meshMap.vertexSize,\n                attributes: [\n                    {\n                    // position\n                    shaderLocation: 0,\n                    offset: meshMap.positionOffset,\n                    format: 'float32x4',\n                    },\n                    {\n                    // uv\n                    shaderLocation: 1,\n                    offset: meshMap.uvOffset,\n                    format: 'float32x2',\n                    },\n                ],\n                },\n            ],\n        },\n        fragment: {\n            module: device.createShaderModule({\n                code: vertexPositionColorWGSL,\n            }),\n            entryPoint: 'main',\n            targets: [\n                {\n                format: presentationFormat,\n                },\n            ],\n        },\n        primitive: {\n            topology: 'triangle-list',\n\n            // Backface culling since the cube is solid piece of geometry.\n            // Faces pointing away from the camera will be occluded by faces\n            // pointing toward the camera.\n            cullMode: 'back',\n        },\n\n            // Enable depth testing so that the fragment closest to the camera\n            // is rendered in front.\n            depthStencil: {\n            depthWriteEnabled: true,\n            depthCompare: 'less',\n            format: 'depth24plus',\n        },\n    });\n\n    const depthTexture = device.createTexture({\n        size: presentationSize,\n        format: 'depth24plus',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    //Size of buffer changes with number of models\n    // const uniformBufferSize = 256 * models.length; // 4x4 matrix\n\n    //Start with fixed size uniform buffer (Max 100 objects) \n    //TODO: Dynamic UBO size increase/new buffer?\n    const uniformBufferSize = 256 * maxModels; // 4x4 matrix\n\n    const uniformBuffer = device.createBuffer({\n        size: uniformBufferSize,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    for (let i = 0; i < maxModels; i++) {\n        uniformBindGroups.push(newUniformBindGroup(device, pipeline, uniformBuffer, i));\n    }\n\n    const cameraUniformBufferSize = 256 * maxCameras; // 4x4 matrix\n\n    const cameraUniformBuffer = device.createBuffer({\n        size: cameraUniformBufferSize,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    //Maybe unecessary and use same function as regular uniform buffer.\n    function createCameraBindGroup () {\n        return device.createBindGroup({\n            layout: pipeline.getBindGroupLayout(1),\n            entries: [\n            {\n                binding: 0,\n                resource: {\n                    buffer: cameraUniformBuffer,\n                    offset: 0,\n                    size: matrixSize*2,\n                },\n            },\n            ],\n            label: \"camera_bind_group\",\n        });\n    }\n\n    for (let i = 0; i < maxCameras; i++) {\n        cameraUniformBindGroups.push(createCameraBindGroup());\n    }\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n        {\n            view: undefined,\n            resolveTarget: undefined,\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n        } as unknown as GPURenderPassColorAttachment,\n        ],\n        depthStencilAttachment: {\n        view: depthTexture.createView(),\n\n        depthClearValue: 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n        },\n    };\n\n    let lastUpdate = Date.now();\n\n    function frame() {\n        //Manage Clock;\n        let now = Date.now();\n        deltaTime = now - lastUpdate;\n        lastUpdate = now;\n        frameNo += 1;\n\n        // Sample is no longer the active page.\n        if (!pageState.active) return;\n\n        //Update each model in the model list\n        for (let model of models) {\n            model.onUpdate();\n        }\n\n        for (let camera of cameras) {\n            camera.onUpdate();\n        }\n        \n        //Write uniform data to GPU\n        for (let i = 0; i < models.length; i++) {\n            const matrix = models[i].transform as Float32Array;\n            const offset = 256 * i;\n            // console.log(\"Offset: \" + offset + \"\\n Name:\" + models[i].meshName + \"\\n Matrix: \" + matrix);\n            device.queue.writeBuffer(\n                uniformBuffer,\n                offset,\n                matrix.buffer,\n                matrix.byteOffset,\n                matrix.byteLength\n            );\n        }\n\n        for (let i = 0; i < cameras.length; i++) {\n            const viewBuf = cameras[i].viewMatrix() as Float32Array;\n            const projBuf = cameras[i].projMatrix() as Float32Array;\n            const camBuf = new Float32Array(viewBuf.length + projBuf.length);\n\n            camBuf.set(viewBuf);\n            camBuf.set(projBuf, viewBuf.length);\n            const offset = 256 * i;\n            // console.log(\"Offset: \" + offset + \"\\n Name:\" + models[i].meshName + \"\\n Matrix: \" + matrix);\n            device.queue.writeBuffer(\n                cameraUniformBuffer,\n                offset,\n                camBuf.buffer,\n                camBuf.byteOffset,\n                camBuf.byteLength\n            );\n        }\n\n        (renderPassDescriptor.colorAttachments as Array<GPURenderPassColorAttachment>)[0].view = context\n        .getCurrentTexture()\n        .createView();\n\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setVertexBuffer(0, verticesBuffer);\n        passEncoder.setBindGroup(1, cameraUniformBindGroups[0]);\n        // passEncoder.draw(cube.vertexCount, 1, 0, 0);\n\n        //Draw each mesh in the map. - Should be changed to draw each mesh for the models.\n        //Or draw all meshes with the same material.\n        for (let i = 0; i < models.length; i++) {\n            const {mesh, offset} = meshMap.get(models[i].meshName);\n            passEncoder.setBindGroup(0, uniformBindGroups[i]);\n            passEncoder.draw(mesh.vertexCount, 1, offset, 0);\n        }\n\n        passEncoder.end();\n        device.queue.submit([commandEncoder.finish()]);\n\n        requestAnimationFrame(frame);\n    }\n\n    for (let model of models) {\n        model.onInit();\n        console.log(\"Initialising models!\")\n    }\n    requestAnimationFrame(frame);\n};\n\nexport default initRenderer;","//Byte size of float multiplied by 10 floats (4 pos, 4 color, 2 uv)\nconst defaultVertexSize = 40;\nconst defaultPositionOffset = 0;\nconst defaultColorOffset = 16;\nconst defaultUVOffset = 32;\n\nexport default interface Mesh {\n    readonly meshName: string; //Used to identify the mesh in the map.  \n    readonly vertexSize: number;\n    readonly vertexCount: number;\n    readonly positionOffset: number;\n    readonly colorOffset: number;\n    readonly uvOffset: number;\n    readonly vertexArray: Float32Array;\n};\n    \nexport class MeshMap {\n    private _meshes = new Map<string, {mesh: Mesh, offset: number}>;\n    private _vertexCount: number = 0;\n    private _vertexSize: number;\n    private _positionOffset: number;\n    private _colorOffset: number;\n    private _uvOffset: number;\n    \n    constructor(\n        vertexSize = defaultVertexSize, \n        positionOffset = defaultPositionOffset, \n        colorOffset = defaultColorOffset,\n        uvOffset = defaultUVOffset,\n    ) {\n        this._vertexSize = vertexSize;\n        this._positionOffset = positionOffset;\n        this._colorOffset = colorOffset;\n        this._uvOffset = uvOffset;\n    }\n\n    get vertexSize(): number {\n        return this._vertexSize;\n    }\n\n    get positionOffset(): number {\n        return this._positionOffset;\n    }\n\n    get colorOffset(): number {\n        return this._colorOffset;\n    }\n\n    get uvOffset(): number {\n        return this._uvOffset;\n    }\n\n    get vertexCount(): number {\n        return this._vertexCount;\n    }\n\n    get(name: string) {\n        const mesh = this._meshes.get(name);\n        if(!mesh) {\n            throw new Error(\"Cannot find mesh!\")\n        }\n\n        return mesh;\n    }\n\n    add(mesh: Mesh) {\n        if(this._meshes.has(mesh.meshName)) {\n            throw new Error(\"Mesh already in map.\");\n        }\n\n        if(this.vertexSize != mesh.vertexSize) {\n            throw new Error(\"Cannot add mesh with different vertex size to the \")\n        }\n\n        if (this.positionOffset != mesh.positionOffset || \n            this.colorOffset != mesh.colorOffset || \n            this.uvOffset != mesh.uvOffset) \n        {\n            throw new Error(\"Cannot add mesh with different offsets.\")\n        }\n\n        let offset = this.vertexCount;\n\n        this._meshes.set(mesh.meshName, {mesh, offset});\n        this._vertexCount += mesh.vertexCount;\n    }\n\n    //Currently not working - Does not reasess offsets of other meshes.\n    remove(mesh: Mesh) {\n        if(this._meshes.has(mesh.meshName)) {\n            this._vertexCount -= mesh.vertexCount;\n            this._meshes.delete(mesh.meshName);\n        }\n    }\n\n    /**\n     * Executes a provided function once per each key/value pair in the Map, in insertion order.\n     */\n    forEach(callbackfn: (value: {mesh: Mesh, offset: number}, key: string, map: Map<string, {mesh: Mesh, offset:number}>) => void, thisArg?: any): void {\n        this._meshes.forEach(callbackfn, thisArg);\n    }\n}\n","import { mat4, vec3 } from \"gl-matrix\";\nimport GameObject from \"../gameObject\";\nimport { getDeltaTime } from \"./rend\";\n\nexport abstract class Camera implements GameObject{\n    position: vec3;\n    direction: vec3;\n    up: vec3;\n    aspect: number;\n    fovy: number;\n    znear: number;\n    zfar: number;\n\n    constructor (position: vec3, direction: vec3, up: vec3, aspect: number, fovy: number = 1, znear: number = 1, zfar: number = 100) {\n        this.position = position\n        this.direction = direction;\n        this.up = up;\n        this.aspect = aspect;\n        this.fovy = fovy;\n        this.znear = znear;\n        this.zfar = zfar;\n    }\n    abstract transform: mat4;\n    abstract onInit: () => void;\n    abstract onUpdate: () => void;\n    abstract onDestroy: () => void;\n\n    abstract viewMatrix();\n\n    abstract projMatrix();\n}\n\nexport class FirstPersonCamera extends Camera implements GameObject {\n    transform: mat4 = mat4.create();\n    mouseSpeed = 0.5;\n    speed = 10.00; //3 units per second\n\n    private horizontalAngle = 3.14;\n    private verticalAngle = 0;\n    private forward: boolean = false;\n    private backward: boolean = false;\n    private left: boolean = false;\n    private right: boolean = false;\n    private rightDirection: vec3 = vec3.create();\n    private initialFov = 45;\n\n    private rotate = false;\n    private lastX = 0;\n    private lastY = 0;\n\n    onInit: () => void = () => {\n        document.addEventListener('mousedown', (event) => {\n            this.rotate = true;\n            this.lastX = event.clientX;\n            this.lastY = event.clientY;\n        });\n\n        document.addEventListener('mouseup', () => {this.rotate = false});\n\n        document.addEventListener('mousemove', (event) => {\n            if (!this.rotate) return;\n\n            var newX = event.clientX;\n            var newY = event.clientY;\n\n            this.horizontalAngle += this.mouseSpeed * getDeltaTime() * (this.lastX - event.clientX );\n            this.verticalAngle   += this.mouseSpeed * getDeltaTime() * (this.lastY - event.clientY );        \n\n            console.log(event.clientX);\n\n            this.direction = vec3.fromValues(\n                Math.cos(this.verticalAngle) * Math.sin(this.horizontalAngle),\n                Math.sin(this.verticalAngle),\n                Math.cos(this.verticalAngle) * Math.cos(this.horizontalAngle)\n            );\n\n            this.rightDirection = vec3.fromValues(\n                Math.sin(this.horizontalAngle - 3.14/2.0),\n                0,\n                Math.cos(this.horizontalAngle - 3.14/2.0)\n            );\n\n            vec3.cross(this.up, this.rightDirection, this.direction);\n\n            this.lastX = newX\n            this.lastY = newY;\n        });\n\n        document.addEventListener('wheel', (event) => {\n            this.fovy = this.initialFov - 5 * event.deltaY;\n        });\n\n        document.addEventListener('keydown', (event) => {\n            if (event.key == \"w\") this.forward= true;\n            if (event.key == \"s\") this.backward = true;\n            if (event.key == \"a\") this.left = true;\n            if (event.key == \"d\") this.right = true;\n        });\n\n        document.addEventListener('keyup', (event) => {\n            if (event.key == \"w\") this.forward = false;\n            if (event.key == \"s\") this.backward = false;\n            if (event.key == \"a\") this.left = false;\n            if (event.key == \"d\") this.right = false;\n        });\n    };\n\n    onUpdate: () => void = () => {\n        if (this.forward){\n            let timeAdjDir = vec3.create();\n            vec3.scale(timeAdjDir, this.direction, getDeltaTime()*this.speed);\n            vec3.add(this.position, this.position, timeAdjDir);\n            console.log(\"Moving Forward!\")\n        }\n\n        if (this.backward){\n            let timeAdjDir = vec3.create();\n            vec3.scale(timeAdjDir, this.direction, getDeltaTime()*this.speed);\n            vec3.subtract(this.position, this.position, timeAdjDir);\n            console.log(\"Moving Backward!\")\n        }\n\n        if (this.right){\n            let timeAdjDir = vec3.create();\n            vec3.scale(timeAdjDir, this.rightDirection, getDeltaTime()*this.speed);\n            vec3.add(this.position, this.position, timeAdjDir);\n            console.log(\"Moving Right!\")\n        }\n\n        if (this.left){\n            let timeAdjDir = vec3.create();\n            vec3.scale(timeAdjDir, this.rightDirection, getDeltaTime()*this.speed);\n            vec3.subtract(this.position, this.position, timeAdjDir);\n            console.log(\"Moving Left!\")\n        }\n    };\n    onDestroy: () => void;\n\n    viewMatrix() : mat4 {\n        let view: mat4 = mat4.create();\n        let target: vec3 = vec3.create();\n        vec3.add(target, this.position, this.direction);\n        mat4.lookAt(view, this.position, target, this.up);\n        return view;\n    }\n\n    projMatrix(): mat4 {\n        const projectionMatrix = mat4.create();\n        // mat4.perspective(projectionMatrix, this.fovy * (Math.PI/180), this.aspect, this.znear, this.zfar);\n        mat4.perspective(projectionMatrix, (Math.PI * 2) / 5, this.aspect, this.znear, this.zfar);\n\n        return projectionMatrix;\n    }\n\n}\n\nexport class CameraController implements GameObject{\n    transform: mat4;\n\n    camera: Camera;\n\n    speed: number;\n    forward: boolean = false;\n    backward: boolean = false;\n    left: boolean = false;\n    right: boolean = false;\n\n    constructor(camera: Camera, speed: number = 0.05) {\n        this.transform = mat4.create();        \n        this.camera = camera;\n        this.speed = speed;\n\n        document.addEventListener('keydown', (event) => {\n            if (event.key == \"w\") this.forward= true;\n            if (event.key == \"s\") this.backward = true;\n            if (event.key == \"a\") this.left = true;\n            if (event.key == \"d\") this.right = true;\n        });\n\n        document.addEventListener('keyup', (event) => {\n            if (event.key == \"w\") {\n                this.forward = false;\n                console.log(\"keyup\");\n            }\n            if (event.key == \"s\") this.backward = false;\n            if (event.key == \"a\") this.left = false;\n            if (event.key == \"d\") this.right = false;\n        });\n\n        // buildViewProjMat(this.transform, this.camera);\n    }\n\n    onInit: () => void;\n    onUpdate = () => {\n    };\n    onDestroy: () => void;\n\n}","import Mesh from \"./mesh\";\n\nconst cubeVertexSize = 4 * 10; // Byte size of one cube vertex.\nconst cubeColorOffset = 4 * 4; // Byte offset of cube vertex color attribute.\nconst cubePositionOffset = 0;\nconst cubeUVOffset = 4 * 8;\nconst cubeVertexCount = 36;\n\n// prettier-ignore\nconst cubeVertexArray = new Float32Array([\n  // float4 position, float4 color, float2 uv,\n  1, -1, 1, 1,   1, 0, 1, 1,  1, 1,\n  -1, -1, 1, 1,  0, 0, 1, 1,  0, 1,\n  -1, -1, -1, 1, 0, 0, 0, 1,  0, 0,\n  1, -1, -1, 1,  1, 0, 0, 1,  1, 0,\n  1, -1, 1, 1,   1, 0, 1, 1,  1, 1,\n  -1, -1, -1, 1, 0, 0, 0, 1,  0, 0,\n\n  1, 1, 1, 1,    1, 1, 1, 1,  1, 1,\n  1, -1, 1, 1,   1, 0, 1, 1,  0, 1,\n  1, -1, -1, 1,  1, 0, 0, 1,  0, 0,\n  1, 1, -1, 1,   1, 1, 0, 1,  1, 0,\n  1, 1, 1, 1,    1, 1, 1, 1,  1, 1,\n  1, -1, -1, 1,  1, 0, 0, 1,  0, 0,\n\n  -1, 1, 1, 1,   0, 1, 1, 1,  1, 1,\n  1, 1, 1, 1,    1, 1, 1, 1,  0, 1,\n  1, 1, -1, 1,   1, 1, 0, 1,  0, 0,\n  -1, 1, -1, 1,  0, 1, 0, 1,  1, 0,\n  -1, 1, 1, 1,   0, 1, 1, 1,  1, 1,\n  1, 1, -1, 1,   1, 1, 0, 1,  0, 0,\n\n  -1, -1, 1, 1,  0, 0, 1, 1,  1, 1,\n  -1, 1, 1, 1,   0, 1, 1, 1,  0, 1,\n  -1, 1, -1, 1,  0, 1, 0, 1,  0, 0,\n  -1, -1, -1, 1, 0, 0, 0, 1,  1, 0,\n  -1, -1, 1, 1,  0, 0, 1, 1,  1, 1,\n  -1, 1, -1, 1,  0, 1, 0, 1,  0, 0,\n\n  1, 1, 1, 1,    1, 1, 1, 1,  1, 1,\n  -1, 1, 1, 1,   0, 1, 1, 1,  0, 1,\n  -1, -1, 1, 1,  0, 0, 1, 1,  0, 0,\n  -1, -1, 1, 1,  0, 0, 1, 1,  0, 0,\n  1, -1, 1, 1,   1, 0, 1, 1,  1, 0,\n  1, 1, 1, 1,    1, 1, 1, 1,  1, 1,\n\n  1, -1, -1, 1,  1, 0, 0, 1,  1, 1,\n  -1, -1, -1, 1, 0, 0, 0, 1,  0, 1,\n  -1, 1, -1, 1,  0, 1, 0, 1,  0, 0,\n  1, 1, -1, 1,   1, 1, 0, 1,  1, 0,\n  1, -1, -1, 1,  1, 0, 0, 1,  1, 1,\n  -1, 1, -1, 1,  0, 1, 0, 1,  0, 0,\n]);\n\nconst CubeMesh: Mesh = {\n  meshName: \"cube\",\n  vertexArray: cubeVertexArray,\n  vertexCount: cubeVertexCount,\n  vertexSize: cubeVertexSize,\n  colorOffset: cubeColorOffset,\n  uvOffset: cubeUVOffset,\n  positionOffset: cubePositionOffset\n}\n\nexport default CubeMesh;","import Mesh from \"./mesh\";\n\nconst vertexSize = 4 * 10; // Byte size of one cube vertex.\nconst colorOffset = 4 * 4; // Byte offset of cube vertex color attribute.\nconst positionOffset = 0;\nconst uvOffset = 4 * 8;\nconst vertexCount = 18;\n\n// prettier-ignore\nconst vertexArray = new Float32Array([\n    // float4 position, float4 color, float2 uv,\n    0, 1, 0, 1,   1, 0, 1, 1,  1, 1,\n    -1, -1, 1, 1,  0, 0, 1, 1,  0, 1,\n    1, -1, 1, 1,  0, 0, 0, 1,  0, 0,\n\n    0, 1, 0, 1,    1, 1, 1, 1,  1, 1,\n    1, -1, 1, 1,   1, 0, 1, 1,  0, 1,\n    1, -1, -1, 1,  1, 0, 0, 1,  0, 0,\n\n    0, 1, 0, 1,    1, 1, 1, 1,  1, 1,\n    1, -1, -1, 1,   1, 0, 1, 1,  0, 1,\n    -1, -1, -1, 1,  1, 0, 0, 1,  0, 0,\n\n    0, 1, 0, 1, 0,  0, 1, 1,  1, 1,\n    -1, -1, -1, 1,   0, 1, 1, 1,  0, 1,\n    -1, -1, 1, 1,  0, 1, 0, 1,  0, 0,\n\n    -1, -1, -1, 1,    1, 1, 1, 1,  1, 1,\n    1, -1, -1, 1,   0, 1, 1, 1,  0, 1,\n    1, -1, 1, 1,  0, 0, 1, 1,  0, 0,\n    -1, -1, -1, 1,  0, 0, 1, 1,  0, 0,\n    1, -1, 1, 1,  0, 0, 1, 1,  0, 0,\n    -1, -1, 1, 1,    1, 1, 1, 1,  1, 1,\n]);\n\nconst SquarePyramidMesh: Mesh = {\n    meshName: \"pyramid\",\n    vertexArray: vertexArray,\n    vertexCount: vertexCount,\n    vertexSize: vertexSize,\n    colorOffset: colorOffset,\n    uvOffset: uvOffset,\n    positionOffset: positionOffset\n}\n\nexport default SquarePyramidMesh;","import Mesh from \"./mesh\";\n\nconst vertexSize = 4 * 10; // Byte size of one cube vertex.\nconst colorOffset = 4 * 4; // Byte offset of cube vertex color attribute.\nconst positionOffset = 0;\nconst UVOffset = 4 * 8;\nconst vertexCount = 6;\n\nconst vertexArray = new Float32Array([\n  // float4 position, float4 color, float2 uv,\n  -1, 0, 1, 1,   0, 1, 1, 1,  1, 1,\n  1, 0, 1, 1,    1, 1, 1, 1,  0, 1,\n  1, 0, -1, 1,   1, 1, 0, 1,  0, 0,\n  -1, 0, -1, 1,  0, 1, 0, 1,  1, 0,\n  -1, 0, 1, 1,   0, 1, 1, 1,  1, 1,\n  1, 0, -1, 1,   1, 1, 0, 1,  0, 0,\n])\n\nconst PlaneMesh: Mesh = {\n  meshName: \"plane\",\n  vertexArray: vertexArray,\n  vertexCount: vertexCount,\n  vertexSize: vertexSize,\n  colorOffset: colorOffset,\n  uvOffset: UVOffset,\n  positionOffset: positionOffset\n}\n\nexport default PlaneMesh;","import { mat4, vec3, vec4 } from 'gl-matrix';\nimport GameObject from './gameObject';\nimport { CheckGPU, createButton, createCanvas, createHeading } from './helper';\nimport Model from './models/model';\nimport { Camera, CameraController, FirstPersonCamera} from './renderer/camera';\nimport initRenderer, { addCamera, drawModel, getFrameRate, loadMesh} from './renderer/rend';\n\n//Model Meshes\nimport CubeMesh from './meshes/cube';\nimport SquarePyramidMesh from './meshes/square_pyramid';\nimport PlaneMesh from './meshes/plane';\n\nif (CheckGPU()) {\n    console.log(\"Starting Bigworld...\")\n\n    const canvas = createCanvas();\n\n    const aspect = canvas.width / canvas.height;\n    const projectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, (2 * Math.PI) / 5, aspect, 1, 100.0);\n\n    function getTransformationMatrix(translatex = 0, translateY = 0, translateZ = 0) {\n        const viewMatrix = mat4.create();\n        mat4.translate(viewMatrix, viewMatrix, vec3.fromValues(translatex, translateY, translateZ));\n        const now = Date.now() / 1000;\n        mat4.rotate(\n        viewMatrix,\n        viewMatrix,\n        1,\n        vec3.fromValues(Math.sin(now), Math.cos(now), 0)\n        );\n\n        const modelViewProjectionMatrix = mat4.create();\n        mat4.multiply(modelViewProjectionMatrix, projectionMatrix, viewMatrix);\n\n        return viewMatrix as Float32Array;\n    }\n\n    class MyCube implements Model {\n        meshName: string = CubeMesh.meshName;\n        transform: mat4 = mat4.create();\n        startPos: vec3;\n\n        constructor(startPos: vec3 = vec3.create()) {\n            this.startPos = startPos;\n            mat4.translate(this.transform, this.transform, startPos);\n        }\n        \n        onInit = () => {\n            console.log(\"Translating cube\");\n            // mat4.translate(this.transform, this.transform, this.startPos);\n        };\n\n        onUpdate = () => {\n            // this.transform = getTransformationMatrix(this.startPos[0], this.startPos[1], this.startPos[2]);\n        };\n\n        onDestroy = () => {};\n    }\n\n    class MyPyramid implements Model {\n        meshName: string = SquarePyramidMesh.meshName;\n        transform: mat4;\n        startPos: vec3;\n\n        constructor(startPos: vec3 = vec3.create()) {\n            this.startPos = startPos;\n            this.transform = mat4.create();\n            mat4.translate(this.transform, this.transform, this.startPos);\n            console.log(this.transform);\n        }\n\n        onInit = () => {\n            console.log(\"Translating cube\");\n            // mat4.translate(this.transform, this.transform, this.startPos);\n        };\n\n        onUpdate() {\n            this.transform = getTransformationMatrix(this.startPos[0], this.startPos[1], this.startPos[2]);\n        }\n\n        onDestroy = () => {};\n    }\n\n    const frameCounter = createHeading(getFrameRate().toString());\n\n    class Plane implements Model {\n        meshName: string = PlaneMesh.meshName;\n        transform: mat4;\n        startPos: vec3;\n\n        constructor(startPos: vec3 = vec3.create(), scale = vec3.create()) {\n            this.startPos = startPos;\n            this.transform = mat4.create();\n\n            mat4.translate(this.transform, this.transform, this.startPos);\n            mat4.scale(this.transform, this.transform, scale);\n            console.log(this.transform);\n        }\n\n        onInit = () => {\n        };\n\n        onUpdate() {\n            frameCounter.textContent = getFrameRate().toString();\n        }\n\n        onDestroy = () => {};\n    }\n\n    loadMesh(SquarePyramidMesh);\n    loadMesh(CubeMesh);\n    loadMesh(PlaneMesh);\n    \n    let i = 1;\n    // drawModel(new MyCube(vec3.fromValues(0, 0, 0)));\n    // drawModel(new MyPyramid(vec3.fromValues(1, 1, 4)));\n    drawModel(new Plane(vec3.fromValues(0, 0, 0), vec3.fromValues(10, 1, 10)))\n\n    createButton(\"Add Cube\", () => {drawModel(new MyCube(vec3.fromValues(0, 1, i*4)));i++;});\n    createButton(\"Add Pyramid\", () => {drawModel(new MyPyramid(vec3.fromValues(2, 1, i*4)));i++;});\n\n    let camera: Camera = new FirstPersonCamera (\n        vec3.fromValues(0, 0, 5),\n        vec3.create(),\n        vec3.fromValues(0, 1, 0),\n        aspect,\n        1,\n        1,\n        100.00\n    )\n\n    addCamera(camera);\n\n    initRenderer({canvas: canvas, pageState: {active: true}});\n\n    \n}"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","translate","a","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","x","y","z","Math","random","PI","hypot","i","arguments","length","sqrt","perspective","fovy","aspect","near","far","nf","f","tan","Infinity","b","scale","createButton","text","onclick","button","document","createElement","textContent","body","appendChild","BWResult","meshMap","constructor","vertexSize","positionOffset","colorOffset","uvOffset","_meshes","Map","_vertexCount","this","_vertexSize","_positionOffset","_colorOffset","_uvOffset","vertexCount","get","name","mesh","Error","add","has","meshName","offset","set","remove","delete","forEach","callbackfn","thisArg","models","uniformBindGroups","cameras","cameraUniformBindGroups","drawModel","model","console","log","ERROR","push","SUCESS","loadMesh","err","newUniformBindGroup","device","pipeline","uniformBuffer","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","size","deltaTime","frameNo","getDeltaTime","startTime","Date","now","getFrameRate","canvas","pageState","adapter","entry","powerPreference","forceFallback","blockFallback","requestAdapter","forceFallbackAdapter","isFallbackAdapter","selectAdapter","navigator","gpu","adapterInfo","requestAdapterInfo","vendor","requestDevice","active","context","getContext","devicePixelRatio","window","presentationSize","clientWidth","clientHeight","presentationFormat","getPreferredCanvasFormat","configure","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","format","alphaMode","verticesBuffer","createBuffer","GPUBufferUsage","VERTEX","mappedAtCreation","bufferArray","getMappedRange","vertexArray","unmap","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","fragment","targets","primitive","topology","cullMode","depthStencil","depthWriteEnabled","depthCompare","depthTexture","createTexture","UNIFORM","COPY_DST","cameraUniformBuffer","matrixSize","label","renderPassDescriptor","colorAttachments","view","undefined","resolveTarget","clearValue","r","g","loadOp","storeOp","depthStencilAttachment","createView","depthClearValue","depthLoadOp","depthStoreOp","lastUpdate","onInit","requestAnimationFrame","frame","onUpdate","camera","matrix","transform","queue","writeBuffer","byteOffset","byteLength","viewBuf","viewMatrix","projBuf","projMatrix","camBuf","getCurrentTexture","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","Camera","position","direction","up","znear","zfar","FirstPersonCamera","mouseSpeed","speed","horizontalAngle","verticalAngle","forward","backward","left","right","rightDirection","initialFov","rotate","lastX","lastY","addEventListener","event","clientX","clientY","ax","ay","az","bx","by","bz","newX","newY","cos","sin","deltaY","key","timeAdjDir","target","eye","center","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","identity","z0","z1","z2","x0","len","x1","x2","y0","y1","y2","projectionMatrix","gpuCheck","getElementById","CheckGPU","insertBefore","id","width","height","createCanvas","getTransformationMatrix","translatex","translateY","translateZ","axis","s","c","t","b00","b01","b02","b10","b11","b12","b20","b21","b22","a30","a31","a32","a33","b0","b1","b2","b3","MyCube","startPos","onDestroy","MyPyramid","frameCounter","heading","createHeading","toString","Plane"],"sourceRoot":""}