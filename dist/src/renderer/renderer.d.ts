/// <reference types="@webgpu/types" />
import Model from "./model";
export interface RendererSettings {
    powerPreference?: GPUPowerPreference;
    forceFallback?: boolean;
    blockFallback?: boolean;
}
export default class Renderer {
    private _adapter;
    get adapter(): GPUAdapter | null;
    private set adapter(value);
    private _device;
    get device(): GPUDevice | null;
    private set device(value);
    private _canvas;
    get canvas(): HTMLCanvasElement;
    private set canvas(value);
    private _context;
    private get context();
    private set context(value);
    private _depthTexture;
    get depthTexture(): GPUTexture | null;
    private set depthTexture(value);
    private _depthTextureView;
    get depthTextureView(): GPUTextureView | null;
    private set depthTextureView(value);
    private _colorTexture;
    get colorTexture(): GPUTexture | null;
    private set colorTexture(value);
    private _colorTextureView;
    get colorTextureView(): GPUTextureView | null;
    private set colorTextureView(value);
    private _canvasFormat;
    get canvasFormat(): GPUTextureFormat;
    private set canvasFormat(value);
    private _vertexBuffer;
    get vertexBuffer(): GPUBuffer | null;
    private set vertexBuffer(value);
    private _colorBuffer;
    get colorBuffer(): GPUBuffer | null;
    private set colorBuffer(value);
    private _indexBuffer;
    get indexBuffer(): GPUBuffer | null;
    private set indexBuffer(value);
    private _vertModule;
    get vertModule(): GPUShaderModule | null;
    private set vertModule(value);
    private _fragModule;
    get fragModule(): GPUShaderModule | null;
    private set fragModule(value);
    private _uniformBuffer;
    get uniformBuffer(): GPUBuffer | null;
    private set uniformBuffer(value);
    private _uniformBindGroupLayout;
    get uniformBindGroupLayout(): GPUBindGroupLayout | null;
    private set uniformBindGroupLayout(value);
    private _uniformBindGroup;
    get uniformBindGroup(): GPUBindGroup | null;
    private set uniformBindGroup(value);
    private _pipelineLayout;
    get pipelineLayout(): GPUPipelineLayout | null;
    private set pipelineLayout(value);
    private _graphicsPipeline;
    get graphicsPipeline(): GPURenderPipeline | null;
    set graphicsPipeline(value: GPURenderPipeline | null);
    private _commandEncoder;
    get commandEncoder(): GPUCommandEncoder | null;
    private set commandEncoder(value);
    private _passEncoder;
    get passEncoder(): GPURenderPassEncoder | null;
    private set passEncoder(value);
    private _queue;
    get queue(): GPUQueue | null;
    private set queue(value);
    constructor(canvas: HTMLCanvasElement, settings?: RendererSettings);
    init(): Promise<void>;
    shutdown(): void;
    loadModel(model: Model): void;
    loadUniforms(uniformData: Float32Array): void;
    private initBindGroups;
    createGraphicsPipeline(): void;
    render(): void;
    private queueCommands;
    private initPipelineLayout;
    private initShaders;
    private initDepthAttachment;
    private initColorAttachment;
    private configureContext;
    private selectAdapter;
    private selectDevice;
}
